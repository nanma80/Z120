# This file was *autogenerated* from the file solving3c.sage.
from sage.all_cmdline import *   # import sage library
_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_7 = Integer(7); _sage_const_6 = Integer(6); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4); _sage_const_26 = Integer(26); _sage_const_24 = Integer(24); _sage_const_41 = Integer(41); _sage_const_65 = Integer(65); _sage_const_88 = Integer(88); _sage_const_63 = Integer(63); _sage_const_60 = Integer(60); _sage_const_132 = Integer(132); _sage_const_111 = Integer(111); _sage_const_83 = Integer(83); _sage_const_77 = Integer(77); _sage_const_39 = Integer(39); _sage_const_38 = Integer(38); _sage_const_31 = Integer(31); _sage_const_30 = Integer(30); _sage_const_53 = Integer(53); _sage_const_34 = Integer(34); _sage_const_37 = Integer(37); _sage_const_36 = Integer(36); _sage_const_120 = Integer(120); _sage_const_76 = Integer(76); _sage_const_70 = Integer(70); _sage_const_73 = Integer(73); _sage_const_72 = Integer(72); _sage_const_101 = Integer(101); _sage_const_102 = Integer(102); _sage_const_61 = Integer(61); _sage_const_78 = Integer(78)
import random

sage.misc.preparser.load(sage.misc.preparser.base64.b64decode("bWF0cml4XzJjLnB5"),globals(),False)
sage.misc.preparser.load(sage.misc.preparser.base64.b64decode("bWF0cml4XzNjLnB5"),globals(),False)

MS2C = MatrixSpace(GF(_sage_const_2 ), _sage_const_72 , _sage_const_120 )
Matrix2C = MS2C(matrix_2c)

MS3C = MatrixSpace(GF(_sage_const_2 ), _sage_const_60 , _sage_const_120 )
Matrix3C = MS3C(matrix_3c)

MS2C3C = MatrixSpace(GF(_sage_const_2 ), _sage_const_132 , _sage_const_120 )
Matrix2C3C = MS2C3C(matrix_2c + matrix_3c)

Move = VectorSpace(GF(_sage_const_2 ), _sage_const_120 )
State2C = VectorSpace(GF(_sage_const_2 ), _sage_const_72 )
State3C = VectorSpace(GF(_sage_const_2 ), _sage_const_60 )

initial_move = [_sage_const_0 ] * _sage_const_120 

cells_to_move = []








# core, north pole
# cells_to_move += [0]

# first layer, 10 cells. Changes 32 orbits
# cells_to_move += [28, 35, 42, 46, 57, 66, 72, 94, 96, 98, 105, 109]

# second layer, 20 cells. Changes 24 orbits
# cells_to_move += [8, 9, 13, 14, 16, 19, 21, 23, 25, 32, 43, 44, 58, 59, 69, 82, 91, 99, 103, 118]

# third layer, 12 cells. Changes 32 orbits
# cells_to_move += [27, 40, 49, 50, 54, 55, 80, 86, 89, 93, 104, 117]

# fourth layer, equator, 30 cells. Changes 0 orbit
cells_to_move += [_sage_const_1 , _sage_const_3 , _sage_const_4 , _sage_const_5 , _sage_const_6 , _sage_const_7 , _sage_const_24 , _sage_const_26 , _sage_const_30 , _sage_const_31 , _sage_const_34 , _sage_const_36 , _sage_const_37 , _sage_const_38 , _sage_const_39 , _sage_const_41 , _sage_const_53 , _sage_const_61 , _sage_const_63 , _sage_const_65 , _sage_const_70 , _sage_const_73 , _sage_const_76 , _sage_const_77 , _sage_const_78 , _sage_const_83 , _sage_const_88 , _sage_const_101 , _sage_const_102 , _sage_const_111 ]

# south of equator
# cells_to_move += [29, 45, 47, 52, 68, 71, 84, 92, 100, 113, 114, 115]

# second layer south of equator
# cells_to_move += [10, 11, 12, 15, 17, 18, 20, 22, 33, 48, 51, 56, 60, 62, 87, 95, 108, 110, 112, 116]

# next to south pole
# cells_to_move += [64, 67, 74, 75, 79, 81, 85, 90, 97, 106, 107, 119]

# south pole
# cells_to_move += [2]

print repr(len(cells_to_move)) + ' cells flipped'

for cell_index in cells_to_move:
  initial_move[cell_index] = _sage_const_1 

gf2_moves = Move(initial_move)

scrambled_state = State3C(Matrix3C * gf2_moves)
print repr(list(scrambled_state).count(_sage_const_1 )) + ' orbits changed'

# for i in range(120):
#   if i > 0:
#     moves = initial_move[:]
#     moves[i] = 1

#     gf2_moves = Move(moves)

#     scrambled_state = State3C(Matrix3C * gf2_moves)
#     print list(scrambled_state).count(1)


# state_builder = [0] * 60
# state_builder[0] = 1

# for i in range(60):
#   state_builder2 = state_builder[:]
#   state_builder2[i] = 1

#   scrambled_state = State3C(state_builder2)
#   try:
#     solution = Matrix3C.solve_right(scrambled_state)
#     print str(i) + ': ' + str(solution)
#     print list(solution).count(1)
#   except ValueError:
#     pass
